name: 🏁 Windows Builds
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: "ubuntu-20.04"
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - name: Windows (arch=x86_64)
            os: ubuntu-22.04
            artifact-name: godot-nir-static-x86_64-release
            artifact-path: bin/libNIR.windows.x86_64.a
            sconsflags: use_mingw=yes arch=x86_64 use_llvm=yes

          - name: Windows (arch=x86_32)
            os: ubuntu-22.04
            artifact-name: godot-nir-static-x86_32-release
            artifact-path: bin/libNIR.windows.x86_32.a
            sconsflags: use_mingw=yes arch=x86_32 use_llvm=yes

          - name: Windows (arch=arm64)
            os: ubuntu-22.04
            artifact-name: godot-nir-static-arm64-release
            artifact-path: bin/libNIR.windows.arm64.a
            sconsflags: use_mingw=yes arch=arm64 use_llvm=yes
            arm: true

          # - name: Windows (arch=arm32)
          #   os: ubuntu-22.04
          #   artifact-name: godot-nir-static-arm32-release
          #   artifact-path: bin/libNIR.windows.arm32.a
          #   sconsflags: use_mingw=yes arch=arm32 use_llvm=yes
          #   arm: true

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Distro-specific Deps Install
        run: |
          # Remove all existing third-party repositories
          sudo rm -f /etc/apt/sources.list.d/*

          # Add architecture support for 32-bit
          sudo dpkg --add-architecture i386

          # Update sources list to include default Ubuntu repositories
          sudo bash -c 'cat > /etc/apt/sources.list <<EOF
          deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse
          EOF'

          # Update package lists
          sudo apt-get update

          sudo apt-get install -y --no-install-recommends \
            bash bzip2 curl file gettext wget \
            git make nano patch scons pkg-config unzip xz-utils cmake gdb

          # Install required packages
          sudo apt-get install -y \
            build-essential \
            gcc-multilib g++-multilib \
            libc6-dev libc6-dev-i386 \
            libx11-dev libx11-dev:i386 \
            libxcursor-dev libxcursor-dev:i386 \
            libxinerama-dev libxinerama-dev:i386 \
            libxi-dev libxi-dev:i386 \
            libxrandr-dev libxrandr-dev:i386 \
            libgl1-mesa-dev libgl1-mesa-dev:i386 
          sudo apt-get install -y \
            libglu1-mesa-dev \
            libasound2-dev \
            libpulse-dev \
            libudev-dev \
            libwayland-dev \
            libstdc++6 \
            libatomic1 \
            libfreetype6-dev \
            libssl-dev \
            libc++-dev \
            libc++abi-dev \
            libgl-dev \
            liblzma-dev \
            liblzma5 \
            libglu-dev \
            libdbus-1-dev \
            libwayland-bin
          sudo apt-get install -y \
            yasm \
            xvfb \
            llvm \
            gcc \
            g++ \
            libspeechd-dev \
            speech-dispatcher \
            fontconfig \
            libfontconfig-dev \
            directx-headers-dev
          # mingw-w64* \
          # sudo update-alternatives --config x86_64-w64-mingw32-g++
          # sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
          # sudo update-alternatives --config x86_64-w64-mingw32-gcc
          # sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          # sudo update-alternatives --config i686-w64-mingw32-g++
          # sudo update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix
          # sudo update-alternatives --config i686-w64-mingw32-gcc
          # sudo update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt-get purge -y --auto-remove
          sudo apt-get autoremove
          sudo apt-get clean

      # - name: Install llvm-mingw
      #   run: |
      #     curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20240619/llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz && \
      #     tar xf llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz && \
      #     rm -f llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz
      #     cd llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64
      #     echo "MINGW_PREFIX=$(pwd)" >> $GITHUB_ENV
      #     echo "$(pwd)/bin" >> $GITHUB_PATH

      - name: Download and extract llvm-mingw SDK
        env:
          CURRENT_DIR: ${{ github.workspace }}
        run: |
          mkdir -p "$CURRENT_DIR/sdks"
          cd "$CURRENT_DIR/sdks"
          curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20241015/llvm-mingw-20241015-msvcrt-ubuntu-20.04-x86_64.tar.xz
          xz -dc llvm-mingw-20241015-msvcrt-ubuntu-20.04-x86_64.tar.xz | tar -xvf -
          rm -f llvm-mingw-20241015-msvcrt-ubuntu-20.04-x86_64.tar.xz
          cd llvm-mingw-20241015-msvcrt-ubuntu-20.04-x86_64
          echo "MINGW_PREFIX=$(pwd)" >> $GITHUB_ENV
          echo "$(pwd)/bin" >> $GITHUB_PATH

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install SCons
        run: |
          python -m pip install scons==4.0.0

      - name: Install mako
        run: |
          python -m pip install mako

      - name: Prepare Mesa source
        shell: bash
        run: |
          ./update_mesa.sh

      - name: Compilation
        run: |
          scons platform=windows ${{ matrix.sconsflags }} optimize=speed mingw_prefix=$MINGW_PREFIX

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            ${{ matrix.artifact-path }}
            godot-mesa/VERSION.info
            godot-mesa/**/*.h
            godot-mesa/**/*.hpp
          if-no-files-found: error

  release:
    name: 'Release'

    needs: [build]

    runs-on: ubuntu-latest

    if: ${{ startsWith(github.ref, 'refs/tags/') }}

    permissions:
      contents: write

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: ZIP Artifacts
        run: |
          for i in */; do (cd "${i%/}"; zip -r "../${i%/}.zip" .; cd ..); done

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          removeArtifacts: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          artifacts: "*.zip"
          artifactErrorsFailBuild: true
